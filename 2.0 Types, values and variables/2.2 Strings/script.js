// Строковые литералы
let a = ""; // Пустая строка
let b = "3.14";
let c = "My name 'Dima'";
let d = 'name = "Dima"';
    // Однострочная строка, записанная в трех строках:
    a = "one\
        long\
        line";
    // Двухстрочная строка, записанная в двух строках:
    b = `the newline character at the end of this line
        is included literally in this string`;

// Управляющие последовательности в строковых литералах
c = 'You\'re right, it can\'t be a quote';

// Работа со строками
let msg = "Hello, " + "world!"; // => "Hello, world!"
let userName = "Dima";
let greeting = "Welcome to my blog, " + userName; // => "Welcome to my blog, Dima";
greeting.length; // => 24
    // API-интерфейс для работы со строками:
    let str = "Hello, world!";
        // Получение порций строки
        str.substring(1,4); // => "ell": 2-й, 3-й и 4-й символы
        str.slice(1,4); // => "ell": то же самое
        str.slice(-3); // => "rld": последние 3 символа
        str.split(", "); // => ["Hello", "world!"]: разбивает по строке разделителя
        
        // Поиск в строке
        str.indexOf("l"); // => 2: позиция первой буквы l
        str.indexOf("l", 3); // => 3; позиция первой буквы l, начиная с 3-й позиции
        str.indexOf("zz"); // => -1: str не включает подстроку "zz"
        str.lastIndexOf("l"); // => 10: позиция последней буквы l

        // Булевские функции поиска в ES6 и последующий версиях
        str.startsWith("Hell"); // => true: строка начинается с этого
        str.endsWith("!"); // => true: строка заканчивается этим
        str.includes("or"); // => true: str включает подстроку "or"

        // Создание модифицированных версий строки
        str.replace("llo", "ya"); // => "Heya, world!"
        str.toLowerCase(); // => "hello, world!"
        str.toUpperCase(); // => "HELLO, WORLD!"
        str.normalize(); // Нормализация Unicode NFC, также есть NFD, NFKC, NFKD

        // Инспектирование индивидуальных (16-битных) символов строки
        str.charAt(0); // => "H": первый символ
        str.charAt(str.length-1); // => "!": последний символ строки
        str.charCodeAt(0); // => 72: 16-битное число в указанной позиции
        str.codePointAt(0); // => 72: ES6, работает с кодовыми точками > 16 бит

        // Функции дополнения строк в ES2017
        "x".padStart(3); // => "  x": добавляет пробелы слева до длины 3
        "x".padEnd(3); // => "x  ": добавляет пробелы справа до длины 3
        "x".padStart(3, "*"); // => "**x": добавляет звездочки слева до длины 3
        "x".padEnd(3, "-"); // => "x--": добавляет звездочки справа до длины 3

        // Функции усечения пробелов. trim() введена в ES5; остальные в ES2019
        " test".trim(); // => "test": удаляет пробелы в начале и конце
        " test ".trimStart() // => "test ": удаляет пробелы в начале
        " test ".trimEnd() // => " test": удаляет пробелы в конце

        // Смешанные методы строк
        str.concat("!"); // => "Hello, world!!"
        "<>".repeat(5); // => "<><><><><>": выполняет конкатенация

// Шаблонные литералы
greeting = `Hello, ${userName}!`; // => "Hello, Dima!"
`\n`.length; // => 1: строка содержит одиночный символ новой строки
String.raw`\n`.length; // => 2: строка содержит символ обратной косой черты и букву n
// Сопоставление с шаблонами
/^HTML/; // Соответствует буквам H T M L в начале строки
/[1-9][0-9]*/; // Соотвутствует отличной от нуля цифре, за которой следует любое количество цифр
/\bjavascript\b/i; // Соответствует "javascript" как слову, нечувствительно к регистру символов
    // Объекты RegExp определяют ряд полезных методов, а строки имеют методы, которые принимают аргументы RegExp, например:
    let text = "testing: 1, 2, 3"; // Пример текста
    let pattern = /\d+/g; // Соответствует всем вхождениям одной или большего количества цифр
    pattern.test(text); // => true: есть совпадение
    text.search(pattern); // => 9: позиция первого совпадения
    text.match(pattern); // => ["1", "2", "3"]: массив всех совпадений
    text.replace(pattern); // => "testing: #, #, #"
    text.split(/\D+/); // => ["", "1", "2", "3"]: разбиение по нецифровым символам